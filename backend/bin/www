#!/usr/bin/env node
/* eslint-disable no-console */
/* eslint-disable prefer-template */
/* eslint-disable no-restricted-globals */
/* eslint-disable no-shadow */
/* eslint-disable vars-on-top */
/* eslint-disable no-use-before-define */
/* eslint-disable import/order */
/* eslint-disable no-var */

/**
 * Module dependencies.
 */

var debug = require('debug')('wavito:server')
var http = require('http')
var app = require('../src/app')

// app.listen('3000', '0.0.0.0', () => {
//   console.log('server is listening on 9000 port')
// })

/**
 * Get port from environment and store in Express.
 */
// console.log('port', process.env.PORT || '3000')
var port = normalizePort(process.env.PORT || '3000')
app.set('port', port)

// const port = normalizePort(process.env.PORT || '3000');
// app.listen(port, () => {
//   console.log('Hello world listening on port', port);
// })

/**
 * Create HTTP server.
 */

var server = http.createServer(app)

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, '0.0.0.0')
server.on('error', onError)
server.on('listening', onListening)

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address()
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port
  debug('Listening on ' + bind)
}
